@model BusinessLogicLayer.Models.Student

@{
    ViewData["Title"] = "Students";
    var students = ViewBag.Students as IEnumerable<Student>;
    var subjects = ViewBag.Subjects as IEnumerable<Subject>;
}


<div class="container mt-5 pt-4">
    <h2>Create Student</h2>
    <hr />
    <div class="row">
        <div class="col-md-5 m-auto border border-5 border-dark rounded-3">
            <form asp-action="Add">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                </div>
                <div class="form-group">
                    <label asp-for="Name" class="control-label"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Date" class="control-label"></label>
                    <input type="date" asp-for="Date" class="form-control" max="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    <span asp-validation-for="Date" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Address" class="control-label"></label>
                    <input asp-for="Address" class="form-control" />
                    <span asp-validation-for="Address" class="text-danger"></span>
                </div>
                <div class="form-group d-flex">
                    <label asp-for="StudentSubjects" class="control-label mr-3 mt-auto mb-auto"></label>
                    <div class="d-flex flex-column">
                        @if (subjects == null || !subjects.Any())
                        {
                            <text>No subject found</text>
                        }
                        else
                        {
                            foreach (var subject in subjects)
                            {
                                <span class="mr-1">
                                    <input type="checkbox" name="SelectedSubjectIds" class="mr-1" value="@subject.Id" /> @subject.Name
                                </span>
                            }
                        }
                    </div>
                </div>
                <div class="form-group text-center">
                    <input type="submit" value="Add" class="btn btn-info" />
                </div>
            </form>
        </div>
    </div>
    <hr />

    @* Display list of students *@
    @* Check if the list is empty *@
    @if (students == null || !students.Any())
    {
        <p>No student found</p>
    }
    else
    {
        <table id="myTable" class="table table-hover table-bordered border border-4">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Name)
                    </th>
                    <th class="text-start">
                        @Html.DisplayNameFor(model => model.Date)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Address)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.StudentSubjects[0].Subject.Name)
                    </th>
                    <th>
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                @foreach (var student in students)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => student.Name)
                        </td>
                        <td class="text-start">
                            @Html.DisplayFor(modelItem => student.Date)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => student.Address)
                        </td>
                        <td>
                            @if (student.StudentSubjects == null || !student.StudentSubjects.Any())
                            {
                                <text>No subject</text>
                            }
                            else
                            {
                                <text>@string.Join(" - ", student.StudentSubjects.Select(s => s.Subject.Name))</text>
                            }
                        </td>
                        <td>
                            <a class="btn btn-dark" asp-action="Edit" asp-route-id="@student.Id">Edit</a>
                            <a class="btn btn-danger" onclick="Delete(@student.Id)">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>



<!-- Add jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Add DataTables CSS -->
<link rel="stylesheet" href="https://cdn.datatables.net/2.0.7/css/dataTables.dataTables.css">
<!-- Add DataTables JS -->
<script src="https://cdn.datatables.net/2.0.7/js/dataTables.js"></script>
<!-- Add Sweet Alert JS-->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Add DataTables script -->
<script>
    new DataTable('#myTable', {
        responsive: true,
        paging: true, // Enable paging
        searching: true, // Enable searching
        ordering: true, // Enable column ordering
        info: true, // Display table information
        autoWidth: false, // Disable automatic column width calculation
        lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]], // Page length options
        language: {
            search: "Filter records:", // Custom search placeholder
            lengthMenu: "Show _MENU_ entries", // Custom length menu text
            info: "Showing _START_ to _END_ of _TOTAL_ entries", // Custom info text
            paginate: {
                first: "First",
                last: "Last",
                next: "Next",
                previous: "Previous"
            }
        },
        fixedHeader: true, // Enable fixed headers
        rowCallback: function (row, data, index) {
            if (index % 2 === 0) {
                $(row).css('background-color', '#f2f2f2'); // Alternate row colors
            }
        }
    });

    // Display a success message
    
    function Delete(id) {
        Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, delete it!"
        }).then((result) => {
            if (result.isConfirmed) {
                console.log(id);
                $.ajax({
                    type: "Delete",
                    url: `/Student/Delete?id=${id}`,
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        Swal.fire({
                            title: "Deleted!",
                            text: "Your file has been deleted.",
                            icon: "success"
                        }).then(() => {
                            window.location.reload();
                        });
                    }
                })
            }
        });
    }

</script>

@* scripts section *@
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}